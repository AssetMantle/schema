// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data/base/any_listable_data.proto

package base

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnyListableData struct {
	// Types that are valid to be assigned to Impl:
	//	*AnyListableData_AccAddressData
	//	*AnyListableData_BooleanData
	//	*AnyListableData_DecData
	//	*AnyListableData_HeightData
	//	*AnyListableData_IDData
	//	*AnyListableData_LinkedData
	//	*AnyListableData_NumberData
	//	*AnyListableData_StringData
	Impl isAnyListableData_Impl `protobuf_oneof:"impl"`
}

func (m *AnyListableData) Reset()         { *m = AnyListableData{} }
func (m *AnyListableData) String() string { return proto.CompactTextString(m) }
func (*AnyListableData) ProtoMessage()    {}
func (*AnyListableData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3606df89b57fc4, []int{0}
}
func (m *AnyListableData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyListableData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyListableData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyListableData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyListableData.Merge(m, src)
}
func (m *AnyListableData) XXX_Size() int {
	return m.Size()
}
func (m *AnyListableData) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyListableData.DiscardUnknown(m)
}

var xxx_messageInfo_AnyListableData proto.InternalMessageInfo

type isAnyListableData_Impl interface {
	isAnyListableData_Impl()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AnyListableData_AccAddressData struct {
	AccAddressData *AccAddressData `protobuf:"bytes,1,opt,name=acc_address_data,json=accAddressData,proto3,oneof" json:"acc_address_data,omitempty"`
}
type AnyListableData_BooleanData struct {
	BooleanData *BooleanData `protobuf:"bytes,2,opt,name=boolean_data,json=booleanData,proto3,oneof" json:"boolean_data,omitempty"`
}
type AnyListableData_DecData struct {
	DecData *DecData `protobuf:"bytes,3,opt,name=dec_data,json=decData,proto3,oneof" json:"dec_data,omitempty"`
}
type AnyListableData_HeightData struct {
	HeightData *HeightData `protobuf:"bytes,4,opt,name=height_data,json=heightData,proto3,oneof" json:"height_data,omitempty"`
}
type AnyListableData_IDData struct {
	IDData *IDData `protobuf:"bytes,5,opt,name=i_d_data,json=iDData,proto3,oneof" json:"i_d_data,omitempty"`
}
type AnyListableData_LinkedData struct {
	LinkedData *LinkedData `protobuf:"bytes,6,opt,name=linked_data,json=linkedData,proto3,oneof" json:"linked_data,omitempty"`
}
type AnyListableData_NumberData struct {
	NumberData *NumberData `protobuf:"bytes,7,opt,name=number_data,json=numberData,proto3,oneof" json:"number_data,omitempty"`
}
type AnyListableData_StringData struct {
	StringData *StringData `protobuf:"bytes,8,opt,name=string_data,json=stringData,proto3,oneof" json:"string_data,omitempty"`
}

func (*AnyListableData_AccAddressData) isAnyListableData_Impl() {}
func (*AnyListableData_BooleanData) isAnyListableData_Impl()    {}
func (*AnyListableData_DecData) isAnyListableData_Impl()        {}
func (*AnyListableData_HeightData) isAnyListableData_Impl()     {}
func (*AnyListableData_IDData) isAnyListableData_Impl()         {}
func (*AnyListableData_LinkedData) isAnyListableData_Impl()     {}
func (*AnyListableData_NumberData) isAnyListableData_Impl()     {}
func (*AnyListableData_StringData) isAnyListableData_Impl()     {}

func (m *AnyListableData) GetImpl() isAnyListableData_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (m *AnyListableData) GetAccAddressData() *AccAddressData {
	if x, ok := m.GetImpl().(*AnyListableData_AccAddressData); ok {
		return x.AccAddressData
	}
	return nil
}

func (m *AnyListableData) GetBooleanData() *BooleanData {
	if x, ok := m.GetImpl().(*AnyListableData_BooleanData); ok {
		return x.BooleanData
	}
	return nil
}

func (m *AnyListableData) GetDecData() *DecData {
	if x, ok := m.GetImpl().(*AnyListableData_DecData); ok {
		return x.DecData
	}
	return nil
}

func (m *AnyListableData) GetHeightData() *HeightData {
	if x, ok := m.GetImpl().(*AnyListableData_HeightData); ok {
		return x.HeightData
	}
	return nil
}

func (m *AnyListableData) GetIDData() *IDData {
	if x, ok := m.GetImpl().(*AnyListableData_IDData); ok {
		return x.IDData
	}
	return nil
}

func (m *AnyListableData) GetLinkedData() *LinkedData {
	if x, ok := m.GetImpl().(*AnyListableData_LinkedData); ok {
		return x.LinkedData
	}
	return nil
}

func (m *AnyListableData) GetNumberData() *NumberData {
	if x, ok := m.GetImpl().(*AnyListableData_NumberData); ok {
		return x.NumberData
	}
	return nil
}

func (m *AnyListableData) GetStringData() *StringData {
	if x, ok := m.GetImpl().(*AnyListableData_StringData); ok {
		return x.StringData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnyListableData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnyListableData_AccAddressData)(nil),
		(*AnyListableData_BooleanData)(nil),
		(*AnyListableData_DecData)(nil),
		(*AnyListableData_HeightData)(nil),
		(*AnyListableData_IDData)(nil),
		(*AnyListableData_LinkedData)(nil),
		(*AnyListableData_NumberData)(nil),
		(*AnyListableData_StringData)(nil),
	}
}

func init() {
	proto.RegisterType((*AnyListableData)(nil), "assetmantle.schema.data.base.AnyListableData")
}

func init() { proto.RegisterFile("data/base/any_listable_data.proto", fileDescriptor_2b3606df89b57fc4) }

var fileDescriptor_2b3606df89b57fc4 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0x87, 0x37, 0x71, 0xbb, 0x5d, 0x66, 0x45, 0x25, 0x14, 0x0c, 0x75, 0x49, 0x57, 0x51, 0x58,
	0x45, 0x12, 0xd0, 0x5b, 0x4e, 0x26, 0x04, 0xac, 0xd8, 0x96, 0xc5, 0xbd, 0x88, 0x2c, 0x2c, 0x93,
	0xc9, 0x90, 0x0c, 0x26, 0x99, 0xb2, 0x33, 0x3d, 0xf4, 0xec, 0xc5, 0x63, 0x3f, 0x82, 0x78, 0xf4,
	0x93, 0x88, 0xa7, 0x1e, 0x3d, 0xca, 0xee, 0xcd, 0x4f, 0x51, 0x66, 0x26, 0x7f, 0xa6, 0x85, 0x0d,
	0x7b, 0x9b, 0x77, 0x9e, 0xf9, 0x3d, 0x33, 0xbc, 0x79, 0x03, 0x9e, 0x26, 0x90, 0x43, 0x2f, 0x86,
	0x0c, 0x7b, 0xb0, 0xbc, 0x5c, 0xe6, 0x84, 0x71, 0x18, 0xe7, 0x78, 0x29, 0xb6, 0xdd, 0xf3, 0x15,
	0xe5, 0xd4, 0x1a, 0x43, 0xc6, 0x30, 0x2f, 0x60, 0xc9, 0x73, 0xec, 0x32, 0x94, 0xe1, 0x02, 0xba,
	0x12, 0x8b, 0xd4, 0xe1, 0x44, 0x13, 0x20, 0xb4, 0x84, 0x49, 0xb2, 0xc2, 0x8c, 0x69, 0xf9, 0xc3,
	0x71, 0x7b, 0x22, 0xa6, 0x34, 0xc7, 0xb0, 0xd4, 0xa9, 0xdd, 0xd2, 0x04, 0x23, 0x9d, 0x3c, 0x69,
	0x49, 0x4e, 0xca, 0xaf, 0x38, 0xd9, 0x02, 0x33, 0x4c, 0xd2, 0x8c, 0xeb, 0xf0, 0x71, 0x0b, 0xc9,
	0xb6, 0x54, 0x79, 0x51, 0xc4, 0x78, 0xb5, 0x05, 0x32, 0xbe, 0x22, 0x65, 0xaa, 0xc3, 0x83, 0x94,
	0xa6, 0x54, 0x2e, 0x3d, 0xb1, 0x52, 0xbb, 0xcf, 0xbe, 0xed, 0x81, 0x87, 0x41, 0x79, 0x79, 0x52,
	0x75, 0x2d, 0x82, 0x1c, 0x5a, 0x9f, 0xc1, 0xa3, 0xbb, 0x8d, 0xb0, 0x8d, 0x89, 0x31, 0x1d, 0xbd,
	0x79, 0xed, 0x76, 0x75, 0xd2, 0x0d, 0x10, 0x0a, 0x54, 0x48, 0x78, 0x8e, 0x7b, 0x9f, 0x1e, 0xc0,
	0x5b, 0x3b, 0xd6, 0x19, 0xb8, 0xaf, 0x37, 0xd0, 0x36, 0xa5, 0xf5, 0x65, 0xb7, 0x35, 0x54, 0x89,
	0x4a, 0x39, 0x8a, 0xdb, 0xd2, 0x0a, 0xc1, 0xb0, 0x6e, 0xb9, 0x7d, 0x4f, 0xba, 0x5e, 0x74, 0xbb,
	0x22, 0x8c, 0x2a, 0xcf, 0x7e, 0xa2, 0x96, 0xd6, 0x47, 0x30, 0xd2, 0xfa, 0x6f, 0xf7, 0xa5, 0x66,
	0xda, 0xad, 0x39, 0x96, 0x81, 0xca, 0x04, 0xb2, 0xa6, 0xb2, 0xde, 0x81, 0x21, 0x59, 0xaa, 0x0f,
	0x66, 0xef, 0x49, 0xd3, 0xf3, 0x6e, 0xd3, 0x87, 0xa8, 0xb2, 0x0c, 0x48, 0x54, 0x3f, 0x47, 0x9b,
	0x15, 0x7b, 0xb0, 0xcb, 0x73, 0x4e, 0x64, 0xa0, 0x7e, 0x4e, 0xde, 0x54, 0x42, 0xa6, 0x4d, 0x89,
	0xbd, 0xbf, 0x8b, 0xec, 0x4c, 0x06, 0x6a, 0x59, 0xd9, 0x54, 0x42, 0xa6, 0x4d, 0x95, 0x3d, 0xdc,
	0x45, 0x36, 0x97, 0x81, 0x5a, 0xc6, 0x9a, 0xca, 0xef, 0x7f, 0xff, 0x71, 0xd4, 0x0b, 0x07, 0xa0,
	0x4f, 0x8a, 0xf3, 0x3c, 0xbc, 0x32, 0x7f, 0xaf, 0x1d, 0xe3, 0x7a, 0xed, 0x18, 0xff, 0xd6, 0x8e,
	0x71, 0xb5, 0x71, 0x7a, 0xd7, 0x1b, 0xa7, 0xf7, 0x77, 0xe3, 0xf4, 0xc0, 0x04, 0xd1, 0xa2, 0xf3,
	0x8e, 0xf0, 0xe0, 0xce, 0xfc, 0xce, 0xc4, 0x60, 0xcf, 0x8c, 0x2f, 0xaf, 0x52, 0xc2, 0xb3, 0x8b,
	0xd8, 0x45, 0xb4, 0xf0, 0x02, 0x21, 0x38, 0x95, 0x02, 0x4f, 0x09, 0xbc, 0x94, 0x7a, 0xcd, 0xef,
	0xf2, 0xd3, 0xec, 0x07, 0xf3, 0x28, 0xfc, 0x65, 0x8e, 0x03, 0xed, 0xa6, 0xb9, 0xba, 0x49, 0x38,
	0xdd, 0x10, 0x32, 0xfc, 0xe7, 0x16, 0x5e, 0x28, 0xbc, 0x10, 0x78, 0x21, 0xf0, 0xda, 0x9c, 0x76,
	0xe1, 0xc5, 0xfb, 0x59, 0x78, 0x8a, 0x39, 0x14, 0x97, 0xfe, 0x37, 0x8f, 0xb4, 0xa3, 0xbe, 0xaf,
	0xce, 0xfa, 0xbe, 0x6c, 0x8d, 0x2f, 0x4e, 0xc7, 0x03, 0xf9, 0x7f, 0xbe, 0xbd, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0xf4, 0x8e, 0xb8, 0xdf, 0x04, 0x00, 0x00,
}

func (m *AnyListableData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyListableData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Impl != nil {
		{
			size := m.Impl.Size()
			i -= size
			if _, err := m.Impl.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnyListableData_AccAddressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_AccAddressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccAddressData != nil {
		{
			size, err := m.AccAddressData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_BooleanData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_BooleanData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BooleanData != nil {
		{
			size, err := m.BooleanData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_DecData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_DecData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecData != nil {
		{
			size, err := m.DecData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_HeightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_HeightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeightData != nil {
		{
			size, err := m.HeightData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_IDData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_IDData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IDData != nil {
		{
			size, err := m.IDData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_LinkedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_LinkedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LinkedData != nil {
		{
			size, err := m.LinkedData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_NumberData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_NumberData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NumberData != nil {
		{
			size, err := m.NumberData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AnyListableData_StringData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyListableData_StringData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringData != nil {
		{
			size, err := m.StringData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyListableData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func encodeVarintAnyListableData(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnyListableData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnyListableData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Impl != nil {
		n += m.Impl.Size()
	}
	return n
}

func (m *AnyListableData_AccAddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccAddressData != nil {
		l = m.AccAddressData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_BooleanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BooleanData != nil {
		l = m.BooleanData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_DecData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecData != nil {
		l = m.DecData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_HeightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightData != nil {
		l = m.HeightData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_IDData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IDData != nil {
		l = m.IDData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_LinkedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LinkedData != nil {
		l = m.LinkedData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_NumberData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberData != nil {
		l = m.NumberData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}
func (m *AnyListableData_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovAnyListableData(uint64(l))
	}
	return n
}

func sovAnyListableData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnyListableData(x uint64) (n int) {
	return sovAnyListableData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnyListableData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnyListableData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyListableData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyListableData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccAddressData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_AccAddressData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BooleanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_BooleanData{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_DecData{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeightData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_HeightData{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_IDData{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LinkedData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_LinkedData{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NumberData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_NumberData{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyListableData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyListableData_StringData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnyListableData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnyListableData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnyListableData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnyListableData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnyListableData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnyListableData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnyListableData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnyListableData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnyListableData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnyListableData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnyListableData = fmt.Errorf("proto: unexpected end of group")
)

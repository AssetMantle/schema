// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lists/base/id_list.proto

package base

import (
	fmt "fmt"
	base "github.com/AssetMantle/schema/go/ids/base"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IDList struct {
	AnyIDs []*base.AnyID `protobuf:"bytes,1,rep,name=any_i_ds,json=anyIDs,proto3" json:"any_i_ds,omitempty"`
}

func (m *IDList) Reset()         { *m = IDList{} }
func (m *IDList) String() string { return proto.CompactTextString(m) }
func (*IDList) ProtoMessage()    {}
func (*IDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d986594c14d71c, []int{0}
}
func (m *IDList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDList.Merge(m, src)
}
func (m *IDList) XXX_Size() int {
	return m.Size()
}
func (m *IDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IDList.DiscardUnknown(m)
}

var xxx_messageInfo_IDList proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IDList)(nil), "assetmantle.schema.lists.base.IDList")
}

func init() { proto.RegisterFile("lists/base/id_list.proto", fileDescriptor_b5d986594c14d71c) }

var fileDescriptor_b5d986594c14d71c = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0xc9, 0x2c, 0x2e,
	0x29, 0xd6, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0xcf, 0x4c, 0x89, 0x07, 0xf1, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x64, 0x13, 0x8b, 0x8b, 0x53, 0x4b, 0x72, 0x13, 0xf3, 0x4a, 0x72, 0x52, 0xf5,
	0x8a, 0x93, 0x33, 0x52, 0x73, 0x13, 0xf5, 0xc0, 0x8a, 0xf5, 0x40, 0x8a, 0xa5, 0x44, 0x33, 0x53,
	0xa0, 0xda, 0x12, 0xf3, 0x2a, 0xe3, 0x33, 0x53, 0x20, 0xba, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3,
	0xc1, 0x4c, 0x7d, 0x10, 0x0b, 0x22, 0xaa, 0xe4, 0xc3, 0xc5, 0xe6, 0xe9, 0xe2, 0x93, 0x59, 0x5c,
	0x22, 0x64, 0xc3, 0xc5, 0x01, 0x56, 0x1f, 0x9f, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d,
	0xa4, 0xa4, 0x87, 0xc5, 0xa2, 0xcc, 0x14, 0x88, 0x35, 0x7a, 0x8e, 0x79, 0x95, 0x9e, 0x2e, 0x41,
	0x6c, 0x89, 0x20, 0xaa, 0xd8, 0x8a, 0xa5, 0x63, 0x81, 0x3c, 0x83, 0x53, 0x2f, 0xd3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x70, 0x29, 0x26, 0xe7, 0xe7, 0xea, 0xe1, 0x75, 0xb8,
	0x13, 0xb7, 0x67, 0x0a, 0xc8, 0x25, 0x01, 0x20, 0x87, 0x05, 0x30, 0x46, 0x69, 0xa7, 0x67, 0x96,
	0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x3b, 0x82, 0x34, 0xfa, 0x82, 0x35, 0xea, 0x43,
	0x34, 0xea, 0xa7, 0xe7, 0xeb, 0x23, 0x42, 0x68, 0x11, 0x13, 0x8b, 0x63, 0xb0, 0x8f, 0xd3, 0x2a,
	0x26, 0x59, 0x47, 0x24, 0x2b, 0x82, 0x21, 0x56, 0xf8, 0x80, 0xad, 0x70, 0x4a, 0x2c, 0x4e, 0x3d,
	0x85, 0x22, 0x1f, 0x03, 0x91, 0x8f, 0x01, 0xcb, 0xc7, 0x80, 0xe4, 0x1f, 0x31, 0x69, 0xe2, 0x95,
	0x8f, 0x71, 0x0f, 0x70, 0xf2, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0x7c, 0xc5, 0xa4, 0x80,
	0xa4, 0xd6, 0xca, 0x0a, 0xa2, 0xd8, 0xca, 0x0a, 0xac, 0xda, 0xca, 0x0a, 0xa4, 0x3c, 0x89, 0x0d,
	0x1c, 0xc8, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0xf4, 0xd6, 0x42, 0xcc, 0x01, 0x00,
	0x00,
}

func (m *IDList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnyIDs) > 0 {
		for iNdEx := len(m.AnyIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AnyIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdList(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IDList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AnyIDs) > 0 {
		for _, e := range m.AnyIDs {
			l = e.Size()
			n += 1 + l + sovIdList(uint64(l))
		}
	}
	return n
}

func sovIdList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdList(x uint64) (n int) {
	return sovIdList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IDList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnyIDs = append(m.AnyIDs, &base.AnyID{})
			if err := m.AnyIDs[len(m.AnyIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdList = fmt.Errorf("proto: unexpected end of group")
)
